/*
 * Copyright 2023 Red Hat, Inc. and/or its affiliates
 * and other contributors as indicated by the @author tags.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.redhat.exhort.integration.providers;

import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Predicate;
import java.util.stream.Collectors;

import org.apache.camel.Exchange;
import org.apache.camel.ExchangeProperty;
import org.apache.camel.Headers;
import org.apache.camel.util.URISupport;
import org.eclipse.microprofile.config.inject.ConfigProperty;

import com.redhat.exhort.config.exception.UnexpectedProviderException;
import com.redhat.exhort.integration.Constants;
import com.redhat.exhort.model.trustify.ProviderConfig;
import com.redhat.exhort.model.trustify.ProvidersConfig;

import io.quarkus.runtime.annotations.RegisterForReflection;

import jakarta.annotation.PostConstruct;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.ws.rs.ClientErrorException;

@ApplicationScoped
@RegisterForReflection
public class VulnerabilityProvider {

  @Inject ProvidersConfig providersConfig;

  @ConfigProperty(name = "api.onguard.disabled", defaultValue = "false")
  boolean onguardDisabled;

  private List<String> providers;

  @PostConstruct
  public void initProviders() {
    // Get enabled providers from configuration
    List<String> enabledProviders = new ArrayList<>();

    // Add OSV provider if not disabled
    if (!onguardDisabled) {
      enabledProviders.add(Constants.OSV_PROVIDER);
    }

    // Add configured trustify providers
    if (providersConfig != null && providersConfig.providers() != null) {
      providersConfig.providers().entrySet().stream()
          .filter(entry -> !entry.getValue().disabled() && entry.getValue().host() != null)
          .map(Map.Entry::getKey)
          .forEach(enabledProviders::add);
    }

    providers = Collections.unmodifiableList(enabledProviders);
  }

  public String get(@ExchangeProperty(Exchange.MULTICAST_INDEX) int index) {
    return providers.get(index);
  }

  /**
   * Get provider configurations for parallel processing Returns a list of provider configurations
   * that can be used for parallel requests
   *
   * @param providers list of provider names
   * @return list of provider configurations with provider names
   */
  public List<Map<String, Object>> getProviderConfigurations(
      @ExchangeProperty(Constants.PROVIDERS_PARAM) List<String> providers) {
    return providers.stream()
        .map(
            p -> {
              Map<String, Object> config = new HashMap<>();
              config.put("providerName", p);

              // Handle OSV provider
              if (Constants.OSV_PROVIDER.equals(p)) {
                config.put("endpoint", "direct:osvScan");
                config.put("providerType", "osv");
                return config;
              }

              // Handle configured trustify providers
              if (providersConfig != null && providersConfig.providers() != null) {
                var providerConfig = providersConfig.providers().get(p);
                if (providerConfig != null
                    && !providerConfig.disabled()
                    && providerConfig.host() != null) {
                  config.put("endpoint", "direct:trustifyScan");
                  config.put("providerType", "trustify");
                  config.put("providerConfig", providerConfig);
                  return config;
                }
              }

              throw new UnexpectedProviderException(new RuntimeException(p));
            })
        .collect(Collectors.toList());
  }

  public List<String> getEnabled() {
    return providers;
  }

  /**
   * Get provider configuration by provider name
   *
   * @param providerName the name of the provider
   * @return the provider configuration or null if not found
   */
  public ProviderConfig getProviderConfig(String providerName) {
    if (providersConfig != null && providersConfig.providers() != null) {
      return providersConfig.providers().get(providerName);
    }
    throw new UnexpectedProviderException(new RuntimeException(providerName));
  }

  /**
   * Check if a specific provider is enabled
   *
   * @param providerName the name of the provider
   * @return true if the provider is enabled, false otherwise
   */
  public boolean isProviderEnabled(String providerName) {
    var config = getProviderConfig(providerName);
    return config != null && !config.disabled() && config.host() != null;
  }

  /**
   * Get all configured provider names from the configuration
   *
   * @return list of all configured provider names
   */
  public List<String> getAllConfiguredProviders() {
    if (providersConfig != null && providersConfig.providers() != null) {
      return new ArrayList<>(providersConfig.providers().keySet());
    }
    return Collections.emptyList();
  }

  /**
   * Get provider configuration for the given provider key
   *
   * @param providerKey the provider key
   * @return the provider configuration or null if not found
   */
  public ProviderConfig getProviderConfigForRoute(String providerKey) {
    if (providersConfig != null && providersConfig.providers() != null) {
      var config = providersConfig.providers().get(providerKey);
      if (config != null && !config.disabled() && config.host() != null) {
        return config;
      }
    }
    return null;
  }

  public List<String> getProvidersFromQueryParam(@Headers Map<String, String> headers)
      throws URISyntaxException {
    var query = headers.get(Exchange.HTTP_QUERY);
    var props = URISupport.parseQuery(query);
    var availableProviders = getProviders(props);
    if (availableProviders == null || availableProviders.isEmpty()) {
      return getEnabled();
    }
    var missing =
        availableProviders.stream()
            .filter(Predicate.not(p -> getEnabled().contains(p)))
            .collect(Collectors.toList());
    if (missing.isEmpty()) {
      return availableProviders;
    }
    throw new ClientErrorException("Unsupported providers: " + missing, 422);
  }

  @SuppressWarnings("unchecked")
  private List<String> getProviders(Map<String, Object> props) {
    var o = props.get(Constants.PROVIDERS_PARAM);
    if (o == null) {
      return null;
    }
    if (o instanceof String string) {
      return List.of(string);
    }
    if (o instanceof List<?> list) {
      return (List<String>) list;
    }
    throw new ClientErrorException("Unsupported providers: " + o, 422);
  }
}
