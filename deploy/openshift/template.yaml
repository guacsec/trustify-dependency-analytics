kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: exhort
labels:
  template: exhort
objects:
  - kind: ServiceAccount
    apiVersion: v1
    metadata:
      name: '${SERVICE_ACCOUNT_NAME}'
  - kind: Service
    apiVersion: v1
    metadata:
      name: '${SERVICE_NAME}'
      labels:
        app-name: '${APP_NAME}'
    spec:
      ports:
        - name: http
          protocol: TCP
          appProtocol: http
          port: '${{SERVICE_PORT}}'
          targetPort: http
        - name: management
          protocol: TCP
          appProtocol: http
          port: '${{MANAGEMENT_PORT}}'
          targetPort: management
      selector:
        app: '${APP_NAME}'
  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: '${APP_NAME}'
    spec:
      replicas: '${{REPLICAS}}'
      selector:
        matchLabels:
          app: '${APP_NAME}'
      template:
        metadata:
          labels:
            app: '${APP_NAME}'
        spec:
          affinity:
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - podAffinityTerm:
                    labelSelector:
                      matchExpressions:
                      - key: app
                        operator: In
                        values:
                        - '${APP_NAME}'
                    topologyKey: kubernetes.io/hostname
                  weight: 90
                - podAffinityTerm:
                    labelSelector:
                      matchExpressions:
                      - key: app
                        operator: In
                        values:
                        - '${APP_NAME}'
                    topologyKey: topology.kubernetes.io/zone
                  weight: 100
          containers:
            - name: app
              image: '${IMAGE}:${IMAGE_TAG}'
              livenessProbe:
                httpGet:
                  path: /q/health/live
                  port: '${{MANAGEMENT_PORT}}'
                initialDelaySeconds: 15
                periodSeconds: 20
              readinessProbe:
                httpGet:
                  path: /q/health/ready
                  port: '${{MANAGEMENT_PORT}}'
                initialDelaySeconds: 2
                periodSeconds: 15
              ports:
                - name: http
                  containerPort: '${{SERVICE_PORT}}'
                  protocol: TCP
                - name: management
                  containerPort: '${{MANAGEMENT_PORT}}'
                  protocol: TCP
              env:
                - name: TPA_HOST
                  value: '${TPA_HOST}'
                - name: TPA_AUTH_SERVER_URL
                  value: '${TPA_AUTH_SERVER_URL}'
                - name: TPA_CLIENT_ID
                  valueFrom:
                    secretKeyRef:
                      name: exhort-secret
                      key: tpa.client.id
                - name: TPA_CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: exhort-secret
                      key: tpa.client.secret
                - name: API_SNYK_DISABLED
                  value: "true"
                - name: API_OSSINDEX_DISABLED
                  value: "true"
                - name: TELEMETRY_WRITE_KEY
                  valueFrom:
                    secretKeyRef:
                      name: exhort-secret
                      key: telemetry-write-key
                - name: DB_REDIS_HOST
                  valueFrom:
                    secretKeyRef:
                      name: '${ELASTICACHE_SECRET}'
                      key: db.endpoint
                - name: DB_REDIS_PORT
                  valueFrom:
                    secretKeyRef:
                      name: '${ELASTICACHE_SECRET}'
                      key: db.port
                - name: DB_POSTGRES_HOST
                  valueFrom:
                    secretKeyRef:
                      name: '${POSTGRES_SECRET}'
                      key: db.host
                - name: DB_POSTGRES_PORT
                  valueFrom:
                    secretKeyRef:
                      name: '${POSTGRES_SECRET}'
                      key: db.port
                - name: DB_POSTGRES_USER
                  valueFrom:
                    secretKeyRef:
                      name: '${POSTGRES_SECRET}'
                      key: db.user
                - name: DB_POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: '${POSTGRES_SECRET}'
                      key: db.password
                - name: DB_POSTGRES_DATABASE
                  valueFrom:
                    secretKeyRef:
                      name: '${POSTGRES_SECRET}'
                      key: db.name
                - name: DB_POSTGRES_CA_CERT
                  valueFrom:
                    secretKeyRef:
                      name: '${POSTGRES_SECRET}'
                      key: db.ca_cert
                - name: DB_POSTGRES_SSLMODE
                  value: '${POSTGRES_SSLMODE}'
                - name: MONITORING_ENABLED
                  value: "true"
                - name: MONITORING_SENTRY_DSN
                  valueFrom:
                    secretKeyRef:
                      name: '${PROJECT_NAME}-dsn'
                      key: dsn
                - name: MONITORING_SENTRY_SERVERNAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: MONITORING_SENTRY_ENVIRONMENT
                  value: '${ENV_NAME}'
                - name: QUARKUS_HTTP_PORT
                  value: '8080'
                - name: QUARKUS_MANAGEMENT_PORT
                  value: '9000'
                - name: QUARKUS_REDIS_MAX_POOL_SIZE
                  value: '20'
                - name: QUARKUS_REDIS_MAX_POOL_WAITING
                  value: '100'
              securityContext:
                runAsNonRoot: true
              resources:
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
              imagePullPolicy: Always
          restartPolicy: Always
          serviceAccountName: '${SERVICE_ACCOUNT_NAME}'

parameters:
  - name: APP_NAME
    displayName: Application name
    description: Application name
    value: exhort
    required: true
  - name: REPLICAS
    displayName: Replicas
    description: Number of desired pods
    value: '1'
    required: true
  - name: IMAGE
    displayName: Container image name
    description: Container image name
    value: quay.io/ecosystem-appeng/exhort
    required: true
  - name: IMAGE_TAG
    displayName: Container image tag
    description: Container image tag
    value: latest
    required: true
  - name: SERVICE_ACCOUNT_NAME
    displayName: ServiceAccount name
    description: The name of the ServiceAccount to use to run this pod.
    value: exhort-sa
    required: true
  - name: SERVICE_NAME
    displayName: Service name
    description: Service name
    value: exhort
    required: true
  - name: ELASTICACHE_SECRET
    displayName: Elasticache Secret
    description: Name of the secret containing the Elasticache settings
    value: exhort-elasticache
    required: true
  - name: POSTGRES_SECRET
    displayName: Postgres Secret
    description: Name of the secret containing the Postgres settings
    value: exhort-rds
    required: true
  - name: POSTGRES_SSLMODE
    displayName: Postgres SSL Mode
    description: SSL Mode for Postgres
    value: 'prefer'
    required: true
  - name: TPA_HOST
    displayName: TPA Host
    description: Trusted Profile Analyzer REST API
    value: https://trust.rhcloud.com/api/v2/
    required: true
  - name: TPA_AUTH_SERVER_URL
    displayName: TPA Auth Server URL
    description: Trusted Profile Analyzer Auth Server URL
    value: https://sso.redhat.com/auth/realms/redhat-external
    required: true
  - name: SERVICE_PORT
    displayName: Service port
    description: Service port
    value: '8080'
    required: true
  - name: MANAGEMENT_PORT
    displayName: Management port
    description: Management port for exposing health and metrics
    value: '9000'
    required: true
  - name: CPU_REQUEST
    description: The minimum amount of CPU required by a container
    displayName: Memory Limit
    required: true
    value: 100m
  - name: CPU_LIMIT
    description: The maximum amount of CPU the container can use.
    displayName: Memory Limit
    required: true
    value: 500m
  - name: MEMORY_REQUEST
    description: The minimum amount of memory required by a container
    displayName: Memory Limit
    required: true
    value: 512Mi
  - name: MEMORY_LIMIT
    description: The maximum amount of memory the container can use.
    displayName: Memory Limit
    required: true
    value: 5120Mi
  - name: ENV_NAME
    value: stage
    displayName: Environment (default -- stage)
    description: 'Application environment'
  - name: PROJECT_NAME
    value: trusted-content-exhort-stage
    displayName: Project name (default -- trusted-content-exhort-stage)
    description: 'Project name'
