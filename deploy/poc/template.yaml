kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: exhort
labels:
  template: exhort
objects:
  - kind: ServiceAccount
    apiVersion: v1
    metadata:
      name: '${SERVICE_ACCOUNT_NAME}'
  - kind: Service
    apiVersion: v1
    metadata:
      name: '${SERVICE_NAME}'
      labels:
        app-name: '${APP_NAME}'
    spec:
      ports:
        - name: http
          protocol: TCP
          appProtocol: http
          port: '${{SERVICE_PORT}}'
          targetPort: http
        - name: management
          protocol: TCP
          appProtocol: http
          port: '${{MANAGEMENT_PORT}}'
          targetPort: management
      selector:
        app: '${APP_NAME}'
        service: '${SERVICE_NAME}'
  - kind: Route
    apiVersion: route.openshift.io/v1
    metadata:
      name: '${APP_NAME}'
    spec:
      tls:
        insecureEdgeTerminationPolicy: Redirect
      to:
        kind: Service
        name: '${SERVICE_NAME}'
      port:
        targetPort: http
  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: '${APP_NAME}'
    spec:
      replicas: '${{REPLICAS}}'
      selector:
        matchLabels:
          app: '${APP_NAME}'
          service: '${SERVICE_NAME}'
      template:
        metadata:
          labels:
            app: '${APP_NAME}'
            service: '${SERVICE_NAME}'
        spec:
          affinity:
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - podAffinityTerm:
                    labelSelector:
                      matchExpressions:
                      - key: app
                        operator: In
                        values:
                        - '${APP_NAME}'
                    topologyKey: kubernetes.io/hostname
                  weight: 90
                - podAffinityTerm:
                    labelSelector:
                      matchExpressions:
                      - key: app
                        operator: In
                        values:
                        - '${APP_NAME}'
                    topologyKey: topology.kubernetes.io/zone
                  weight: 100
          containers:
            - name: app
              image: '${IMAGE}:${IMAGE_TAG}'
              livenessProbe:
                httpGet:
                  path: /q/health/live
                  port: '${{MANAGEMENT_PORT}}'
                initialDelaySeconds: 15
                periodSeconds: 20
              readinessProbe:
                httpGet:
                  path: /q/health/ready
                  port: '${{MANAGEMENT_PORT}}'
                initialDelaySeconds: 2
                periodSeconds: 15
              ports:
                - name: http
                  containerPort: '${{SERVICE_PORT}}'
                  protocol: TCP
                - name: management
                  containerPort: '${{MANAGEMENT_PORT}}'
                  protocol: TCP
              env:
                - name: TPA_HOST
                  value: '${TPA_HOST}'
                - name: TPA_AUTH_SERVER_URL
                  value: '${TPA_AUTH_SERVER_URL}'
                - name: TPA_CLIENT_ID
                  valueFrom:
                    secretKeyRef:
                      name: exhort-secret
                      key: tpa.client.id
                - name: TPA_CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: exhort-secret
                      key: tpa.client.secret
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: exhort-secret
                      key: aws.access.key.id
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: exhort-secret
                      key: aws.secret.access.key
                - name: S3_BUCKET_NAME
                  valueFrom:
                    secretKeyRef:
                      name: exhort-secret
                      key: s3.bucket.name
                - name: AWS_REGION
                  valueFrom:
                    secretKeyRef:
                      name: exhort-secret
                      key: aws.region
                - name: API_SNYK_DISABLED
                  value: "true"
                - name: API_OSSINDEX_DISABLED
                  value: "true"
                - name: DB_REDIS_HOST
                  value: 'redis'
                - name: DB_REDIS_PORT
                  value: "${REDIS_PORT}"
                - name: MONITORING_ENABLED
                  value: "false"
                - name: QUARKUS_HTTP_PORT
                  value: '8080'
                - name: QUARKUS_MANAGEMENT_PORT
                  value: '9000'
                - name: QUARKUS_REDIS_MAX_POOL_SIZE
                  value: '20'
                - name: QUARKUS_REDIS_MAX_POOL_WAITING
                  value: '100'
                - name: TELEMETRY_DISABLED
                  value: "true"
              securityContext:
                runAsNonRoot: true
              resources:
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
              imagePullPolicy: Always
          restartPolicy: Always
          serviceAccountName: '${SERVICE_ACCOUNT_NAME}'
  - kind: Service
    apiVersion: v1
    metadata:
      name: redis
      labels:
        app-name: '${APP_NAME}'
    spec:
      ports:
        - name: redis
          protocol: TCP
          port: '${{REDIS_PORT}}'
          targetPort: redis
      selector:
        app: '${APP_NAME}'
        service: redis
  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: redis
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: '${APP_NAME}'
          service: redis
      template:
        metadata:
          labels:
            app: '${APP_NAME}'
            service: redis
        spec:
          containers:
            - name: app
              image: redis:7
              ports:
                - name: redis
                  containerPort: '${{REDIS_PORT}}'
                  protocol: TCP
              securityContext:
                runAsNonRoot: true
              imagePullPolicy: Always
          restartPolicy: Always
          serviceAccountName: '${SERVICE_ACCOUNT_NAME}'
parameters:
  - name: APP_NAME
    displayName: Application name
    description: Application name
    value: exhort
    required: true
  - name: REPLICAS
    displayName: Replicas
    description: Number of desired pods
    value: '1'
    required: true
  - name: IMAGE
    displayName: Container image name
    description: Container image name
    value: quay.io/ruben/exhort
    required: true
  - name: IMAGE_TAG
    displayName: Container image tag
    description: Container image tag
    value: latest
    required: true
  - name: SERVICE_ACCOUNT_NAME
    displayName: ServiceAccount name
    description: The name of the ServiceAccount to use to run this pod.
    value: exhort-sa
    required: true
  - name: SERVICE_NAME
    displayName: Service name
    description: Service name
    value: exhort
    required: true
  - name: TPA_HOST
    displayName: TPA Host
    description: Trusted Profile Analyzer REST API
    value: https://trust.rhcloud.com/api/v2/
    required: true
  - name: TPA_AUTH_SERVER_URL
    displayName: TPA Auth Server URL
    description: Trusted Profile Analyzer Auth Server URL
    value: https://sso.redhat.com/auth/realms/redhat-external
    required: true
  - name: SERVICE_PORT
    displayName: Service port
    description: Service port
    value: '8080'
    required: true
  - name: REDIS_PORT
    displayName: Redis port
    description: Redis port
    value: '6379'
    required: true
  - name: MANAGEMENT_PORT
    displayName: Management port
    description: Management port for exposing health and metrics
    value: '9000'
    required: true
  - name: CPU_REQUEST
    description: The minimum amount of CPU required by a container
    displayName: Memory Limit
    required: true
    value: '100m'
  - name: CPU_LIMIT
    description: The maximum amount of CPU the container can use.
    displayName: Memory Limit
    required: true
    value: '500m'
  - name: MEMORY_REQUEST
    description: The minimum amount of memory required by a container
    displayName: Memory Limit
    required: true
    value: '512Mi'
  - name: MEMORY_LIMIT
    description: The maximum amount of memory the container can use.
    displayName: Memory Limit
    required: true
    value: '5120Mi'
